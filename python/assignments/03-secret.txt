)

---

### Assignment 01: Add Item to List
fruits = ["apple", "banana", "orange"]
new_fruit = input("Enter a fruit to add: ")
fruits.append(new_fruit)
print(fruits)

---

### Assignment 02: Shopping List

items = []
for i in range(5):
    item = input(f"Enter item {i+1}: ")
    items.append(item)
print(items

---

### Assignment 03: Remove Item from List

fruits = ["apple", "banana", "orange"]
remove_fruit = input("Enter a fruit to remove: ")
if remove_fruit in fruits:
    fruits.remove(remove_fruit)
    print(fruits)
else:
    print("Not in list")

---

### Assignment 04: Sort and Print List
numbers = []
for i in range(5):
    num = int(input(f"Enter number {i+1}: "))
    numbers.append(num)
numbers.sort()
print(numbers)

---

### Assignment 05: Check Palindrome with List

word = input("Give string: ")
chars = list(word)
reversed_chars = chars[::-1]
if chars == reversed_chars:
    print("It is a palindrome")
else:
    print("It is not a palindrome")

---

### Assignment 06: List Average
numbers = []
for i in range(5):
    num = float(input(f"Enter number {i+1}: "))
    numbers.append(num)
avg = sum(numbers) / len(numbers)
print("Average:", avg)


---

### Assignment 07: Dictionary Lookup
ages = {"John": 25, "Mary": 30, "Alex": 22}
name = input("Enter name: ")
if name in ages:
    print(ages[name])
else:
    print("Name not found")

---

### Assignment 08: Update Dictionary
ages = {"John": 25, "Mary": 30, "Alex": 22}
name = input("Enter name: ")
age = int(input("Enter age: "))
ages[name] = age
print(ages)

---

### Assignment 09: Dictionary from Input
scores = {}
for i in range(3):
    name = input("Enter name: ")
    score = int(input("Enter score: "))
    scores[name] = score
print(scores)

---

### Assignment 10: Convert List to Dict
pairs = {}
for i in range(3):
    entry = input("Enter key:value pair: ")
    key, value = entry.split(":")
    pairs[key] = value
print(pairs)

---

### Assignment 11: List of Dictionaries
products = [
    {"name": "milk", "price": 1.5},
    {"name": "bread", "price": 2.0}
]
for p in products:
    print(f"{p['name']} costs {p['price']}")

---

### Assignment 12: Count Occurrences
words = input("Enter words (comma separated): ")
word_list = words.split(",")
counts = {}
for w in word_list:
    if w in counts:
        counts[w] += 1
    else:
        counts[w] = 1
print(counts)

---

### Assignment 13: Dictionary Gradebook
grades = {}
for i in range(5):
    name = input("Enter student name: ")
    grade = int(input("Enter grade: "))
    grades[name] = grade
for name, grade in grades.items():
    print(f"{name}: grade {grade}")

---

### Assignment 14: Nested Dictionary
students = {
    "Alice": {"age": 21, "major": "CS"},
    "Bob": {"age": 22, "major": "Math"}
}
while True:
    print("Students:")
    print(students)
    print("[1] Add new student")
    print("[2] Exit")
    choice = input("Choose: ")
    if choice == "1":
        name = input("Give name: ")
        age = int(input("Give age: "))
        major = input("Give major: ")
        students[name] = {"age": age, "major": major}
    elif choice == "2":
        print("Bye!")
        break
    else:
        print("Invalid choice")

---

### Assignment 15: Tuple Packing
person = ("Anna", 25, "Finland")
print("Name:", person[0])
print("Age:", person[1])
print("Country:", person[2])

---

### Assignment 16: Tuple with Mixed Data Types
data = ("Alice", 30, [10, 20, 30], True)
print("Tuple:", data)
print("List inside tuple:", data[2])
data[2].append(40)
print("Updated tuple:", data)

---

### Assignment 17: Tuple Slicing
numbers = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
print("First three:", numbers[:3])
print("Last three:", numbers[-3:])
print("Middle four:", numbers[3:7])

---

### Assignment 18: Nested Tuples
students = (
    ("Alice", 21, "CS"),
    ("Bob", 22, "Math")
)
for s in students:
    print(f"Name: {s[0]}, Age: {s[1]}, Major: {s[2]}")

---

### Assignment 19: Set Creation
words = set()
for i in range(5):
    word = input(f"Enter word {i+1}: ")
    words.add(word)
print(words)

---

### Assignment 20: Set Membership Test
allowed = {"Alice", "Bob", "Charlie"}
name = input("Enter name: ")
if name in allowed:
    print("Name is allowed")
else:
    print("Name not allowed")

---

### Assignment 21: Set Operations
set1 = set(input("Enter first set (comma separated): ").split(","))
set2 = set(input("Enter second set (comma separated): ").split(","))
print("Union:", set1.union(set2))
print("Intersection:", set1.intersection(set2))

---

### Assignment 22: Unique Items
items = input("Enter items (comma separated): ").split(",")
unique = set(items)
print(unique)


### Assignment 23: Lotto

import random

# --- read and validate user input (no functions, no exceptions, no for-in) ---
raw = input("Enter your 7 unique lotto numbers (1-40), separated by spaces: ").strip()
tokens = raw.split()

valid = True

# count check
if len(tokens) != 7:
    print("Error: You must enter exactly 7 numbers.")
    valid = False

nums = []
i = 0
while valid and i < 7:
    t = tokens[i]

    # integer check (only digits)
    if not t.isdigit():
        print("Error: All inputs must be integers between 1 and 40.")
        valid = False
        break

    n = int(t)

    # range check
    if n < 1 or n > 40:
        print("Error: Numbers must be between 1 and 40.")
        valid = False
        break

    # uniqueness check
    j = 0
    duplicate = False
    while j < len(nums):
        if nums[j] == n:
            duplicate = True
            break
        j += 1
    if duplicate:
        print("Error: Numbers must be unique.")
        valid = False
        break

    nums.append(n)
    i += 1

if valid:
    # normalize user's numbers and show them with leading zeros
    user_numbers = set(nums)
    user_sorted = tuple(sorted(user_numbers))

    k = 0
    out_user = []
    while k < len(user_sorted):
        out_user.append(f"{user_sorted[k]:02d}")
        k += 1
    print("Your numbers:", " ".join(out_user))
    print()

    # --- main loop: one iteration = one week ---
    weeks = 0
    while True:
        weeks += 1

        # generate 7 unique random numbers with randint (no random.sample)
        draw = set()
        while len(draw) < 7:
            n = random.randint(1, 40)
            # set handles duplicates automatically
            draw.add(n)

        draw_sorted = tuple(sorted(draw))

        # format weekly draw with leading zeros
        m = 0
        out_draw = []
        while m < len(draw_sorted):
            out_draw.append(f"{draw_sorted[m]:02d}")
            m += 1
        print(f"Week {weeks}: {" ".join(out_draw)}")

        # jackpot check
        if draw == user_numbers:
            years = weeks // 52
            print()
            print(f"Jackpot after {weeks} weeks (~{years} years)!")
            break